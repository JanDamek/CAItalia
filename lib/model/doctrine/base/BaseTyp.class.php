<?php

/**
 * BaseTyp
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property clob $popis
 * @property Doctrine_Collection $Zajezdy
 * 
 * @method integer             getId()      Returns the current record's "id" value
 * @method string              getName()    Returns the current record's "name" value
 * @method clob                getPopis()   Returns the current record's "popis" value
 * @method Doctrine_Collection getZajezdy() Returns the current record's "Zajezdy" collection
 * @method Typ                 setId()      Sets the current record's "id" value
 * @method Typ                 setName()    Sets the current record's "name" value
 * @method Typ                 setPopis()   Sets the current record's "popis" value
 * @method Typ                 setZajezdy() Sets the current record's "Zajezdy" collection
 * 
 * @package    caitalia
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTyp extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('typ');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('popis', 'clob', null, array(
             'type' => 'clob',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Zajezdy', array(
             'local' => 'id',
             'foreign' => 'typ_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'Sluggable' => NULL,
             'unique' => true,
             'fields' => 
             array(
              0 => 'name',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
    }
}